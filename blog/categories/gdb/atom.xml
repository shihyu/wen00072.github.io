<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gdb | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/gdb/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2016-10-04T12:36:38+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用gdb 靜態分析C 語言名稱和參數相同函數的原始檔位置]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb/"/>
    <updated>2016-10-03T14:36:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>感謝<a href="http://scottt.tw/">Scott</a>大大的資訊。</p>

<p>忘記那邊看過的名言：「手上有了新玩具，就會想要馬上拿來用。」</p>

<h2>動機</h2>

<p>組裝軟體的時候，有一件事很讓我困擾。那就是當整包SDK有兩個以上名稱和參數相同的函數的時候。當這種情況發生時，trace code就很麻煩，你必須要花時間釐清到底最後會使用到那一個函數。而這些config可能用下面兩種方式切換這些名稱和參數相同的函數：</p>

<ol>
<li>巨集

<ul>
<li><code>#if</code></li>
<li><code>#ifdef</code></li>
</ul>
</li>
<li>Makefile

<ul>
<li>在檔案中根據不同變數編譯不同的檔案</li>
</ul>
</li>
</ol>


<p>我以前會視情況用下面兩種方法找到該函數編譯實際使用的原始檔位置</p>

<ol>
<li>下毒藥，只要相同名字的函數都塞入<code>#error 可以辨別的字串</code>。編譯時根據錯誤訊息判斷使用哪個函數</li>
<li>gdb設斷點，runtime透過中斷函數的方式取得函數的檔案和行號</li>
</ol>


<p>不過<a href="http://scottt.tw/">Scott</a>大大的今天給的資訊讓我可以更省力的處理這個問題了。</p>

<p>如果只想要知道用法，看完下面指令就可以收工回家了。</p>

<pre><code class="sh">gdb -ex 'file 你的執行檔或是shared library檔' -ex 'info line 要查的函數' -ex 'quit'
</code></pre>

<p>當然用<code>gdb</code>編譯時不要忘記加debug option。</p>

<h2>目錄</h2>

<ul>
<li><a href="#gds_env">測試環境</a></li>
<li><a href="#gds_files">測試檔案</a>

<ul>
<li><a href="#gds_files_1">test_same_func.c</a></li>
<li><a href="#gds_files_2">same_func1.c</a></li>
<li><a href="#gds_files_3">same_func2.c</a></li>
<li><a href="#gds_files_mk">Makefile</a></li>
</ul>
</li>
<li><a href="#gds_test">測試結果</a></li>
<li><a href="#gds_ref">延伸資料</a></li>
</ul>


<p><a name="gds_env"></a></p>

<h2>測試環境</h2>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</code></pre>

<p><a name="gds_files"></a></p>

<h2>測試檔案</h2>

<p>簡單來說，就是實作切換兩種方式同樣名稱和參數的函數：</p>

<ol>
<li>巨集</li>
<li>Makefile</li>
</ol>


<p>所以我們會有</p>

<ol>
<li><a href="#gds_files_1">測試檔案進入點</a></li>
<li><a href="#gds_files_2">測試檔一</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔二完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_3">測試檔二</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔一完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_mk">Makefile</a>

<ul>
<li>除了編譯以外，還提供兩個變數，由command line傳入

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>


<p><a name="gds_files_1"></a></p>

<h3>test_same_func.c</h3>

<ul>
<li>測試檔案進入點，呼叫func1()。func1()在compile time才被決定</li>
</ul>


<pre><code class="c test_same_func.c">#include &lt;stdio.h&gt;
extern void func1(void);

int main()
{
    printf("Hello World\n");
    func1();

    return 0;
}
</code></pre>

<p><a name="gds_files_2"></a></p>

<h3>same_func1.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_2">same_func2</a>完全一模一樣</li>
</ul>


<pre><code class="c same_func1.c">#include &lt;stdio.h&gt;

#if OP1
void func1(void)
{
    printf("%s: %s_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#else
void func1(void)
{
    printf("%s: %s_NOT_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#endif
</code></pre>

<p><a name="gds_files_3"></a></p>

<h3>same_func2.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_1">same_func1</a>完全一模一樣</li>
</ul>


<pre><code class="c same_func2.c">#include &lt;stdio.h&gt;

#if OP1
void func1(void)
{
    printf("%s: %s_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#else
void func1(void)
{
    printf("%s: %s_NOT_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#endif
</code></pre>

<p><a name="gds_files_mk"></a></p>

<h3>Makefile</h3>

<p>提供兩個變數，由command line傳入</p>

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>


<pre><code class="makefile">CFLAGS+=-Wall -Werror -g3
TARGET=test_same_func
SRCS=test_same_func.c

ifeq ($(USE_FILE), 1)
    SRCS += same_func1.c
else
    SRCS += same_func2.c
endif

ifeq ($(EN_OP1), 1)
    CFLAGS += -DOP1=1
endif

OBJS=$(patsubst %.c, %.o, $(SRCS))

$(TARGET): $(OBJS)
    $(CC) -o $@ $^
    gdb -ex 'file $@' -ex 'info line func1' -ex 'quit'

%.o: %.c
    $(CC) $(CFLAGS) -c $^

clean:
    rm *.o *~ $(TARGET) -f
</code></pre>

<p><a name="gds_test"></a></p>

<h2>測試結果</h2>

<p>前面提過，<code>func1()</code>的實作受兩個變數影響，分別為</p>

<ol>
<li>巨集<code>OP1</code>是否有設定

<ul>
<li>只有<code>OP1</code> 被設定<strong>並且</strong>非零時才會進入<code>OP1</code>的<code>func1()</code></li>
</ul>
</li>
<li>Makefile變數<code>USE_FILE</code>是否有設定

<ul>
<li>只有<code>USE_FILE</code>為1的時候才會使用<code>same_func1.c</code>，其他情形都編譯<code>same_func2.c</code></li>
</ul>
</li>
</ol>


<p>所以我們make 指令有下面四種變化</p>

<ol>
<li><a href="">巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</a></li>
<li><a href="">設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</a></li>
<li><a href="">巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></a></li>
<li><a href="">全部設定巨集<code>OP1</code>和<code>USE_FILE</code></a></li>
</ol>


<p><a name=""></a></p>

<h3>巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean 
default settings: OP1 disable and use same_func1.c
rm *.o *~ test_same_func -f

$ make
cc -Wall -Werror -g3 -c test_same_func.c
cc -Wall -Werror -g3 -c same_func2.c
cc -o test_same_func test_same_func.o same_func2.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 11 of "same_func2.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func2.c: func1_NOT_OP1
</code></pre>

<p><a name=""></a></p>

<h3>設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make EN_OP1=1
cc -Wall -Werror -g3 -DOP1=1 -c test_same_func.c
cc -Wall -Werror -g3 -DOP1=1 -c same_func2.c
cc -o test_same_func test_same_func.o same_func2.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 5 of "same_func2.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func2.c: func1_OP1
</code></pre>

<p><a name=""></a></p>

<h3>巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make USE_FILE=1
cc -Wall -Werror -g3 -c test_same_func.c
cc -Wall -Werror -g3 -c same_func1.c
cc -o test_same_func test_same_func.o same_func1.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 11 of "same_func1.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func1.c: func1_NOT_OP1
</code></pre>

<p><a name=""></a></p>

<h3>全部設定巨集<code>OP1</code>和<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make EN_OP1=1 USE_FILE=1
cc -Wall -Werror -g3 -DOP1=1 -c test_same_func.c
cc -Wall -Werror -g3 -DOP1=1 -c same_func1.c
cc -o test_same_func test_same_func.o same_func1.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 5 of "same_func1.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func1.c: func1_OP1
</code></pre>

<p><a name="gds_ref"></a></p>

<h2>延伸資料</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1w1nPmCLpeRN3kEYglzHwozhWXY0ddT9oe6JCZocsPNE/edit">Using GDB to Help You Read Linux Kernel Code without Running It</a>

<ul>
<li><a href="http://scottt.tw/">Scott</a>大大的文件，描述使用gdb 靜態分析Linux kernel的技巧</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>

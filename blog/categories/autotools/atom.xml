<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Autotools | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/autotools/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2016-10-01T21:32:41+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[談談autotools 的 Build, Target, 和host]]></title>
    <link href="http://wen00072.github.io/blog/2015/02/06/talk-about-the-autotools-build-target-and-host/"/>
    <updated>2015-02-06T22:24:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/02/06/talk-about-the-autotools-build-target-and-host</id>
    <content type="html"><![CDATA[<p>先來個小故事，某天組裝工趁放假跑去看老房子。發現只有一間上面有動物的造型。因為年代久遠，只看得出來有四肢腳而已，而不知道是那種動物。好奇之餘問了店家，店家說他們承租，不知道那是什麼東西。後來一位長者經過，就順便請教他同一個問題，長者說他住這邊好幾年都不知道上面有這東西。最後遇到當地文史工作室的人，問了才知道是當時主人的商標，一隻獅子。</p>

<p>我們常常用的東西，因為太習以為常，以至於發生視而不見的狀況屢見不鮮。但是惡魔就在細節裏面，而長時間地視而不見就會把自己對於這樣的事物感受性變低。</p>

<p>回到主體。組裝的時候，常常缺東缺西的。這時候就需要cross-compile一些套件頂一下，所以如果有人組裝過的話，應該會對下面的命令倍感親切。</p>

<pre><code>$ ./configure --host=mipsel
</code></pre>

<p>如果組裝夠次數夠多，也會看到<code>--target</code>和<code>--build</code>的參數似乎和這個有關。找時間稍微了解一下</p>

<p><font color="red">對於&ndash;target目前手上的資料無法讓我完全理解，請注意！</font></p>

<p>根據<a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Hosts-and-Cross_002dCompilation.html#Hosts-and-Cross_002dCompilation">Autoconf手冊</a>說明，這些參數的預設值如下:</p>

<ul>
<li><code>--build</code>

<ul>
<li>從config.guess中猜的</li>
</ul>
</li>
<li><code>--host</code>

<ul>
<li>設成和<code>--build</code>相同</li>
</ul>
</li>
<li><code>--target</code>

<ul>
<li>設成和<code>--host</code>相同</li>
</ul>
</li>
</ul>


<p>因為這樣的連動性，如果你要cross-compile，那麼下了<code>--host</code>後麻煩不要省掉<code>--build</code>，不然autotool會把build設成和host一樣。</p>

<p>Automake手冊裏面的定義</p>

<ul>
<li><code>--build</code>

<ul>
<li>你build code，下xxx-gcc那台機器平台</li>
</ul>
</li>
<li><code>--host</code>

<ul>
<li>產生的binary可以執行的平台</li>
</ul>
</li>
<li><code>--target</code>

<ul>
<li>告訴gcc要產生什麼平台的機械碼

<ul>
<li>一般來說會和<code>--host</code>一樣同樣的平台，根據上面的連動，你設了<code>--host</code>就可以省略這個選項</li>
<li>特例是compile cross-compiler或是binutils，toolchain。這時候是指定build在host上，但是處理的對象是cross platform的機械碼</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Autotool選擇gcc的方式如下</p>

<ul>
<li><code>--host</code>和<code>--build</code>相同

<ul>
<li>用你電腦上的gcc，來編譯autotool的套件。</li>
</ul>
</li>
<li><code>--host</code>和<code>--build</code>不同

<ul>
<li>你要自備cross-compiler</li>
<li>如果有指定<code>--target</code>的為gcc的prefix</li>
<li>如<code>--host=xxx</code>, <code>--target=zzz</code>，會使用zzz-gcc產生xxx平台的機械碼</li>
<li>用該cross-compiler來編譯autotool的套件</li>
<li>這時候要保證cross compiler可以吃的library也存在，常常會為了編一個套件cross compile一堆套件</li>
</ul>
</li>
</ul>


<p>看的有點混亂嘛？沒關係，autoconf 2.69手冊有提到，要cross-compile的話，唯一(if and only if)的條件就是指令<code>--host</code>指定和你現在的平台不同就好。</p>

<h2>參考資料</h2>

<ul>
<li><a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Hosts-and-Cross_002dCompilation.html">Autoconf手冊: Hosts and Cross-Compilation</a></li>
<li><a href="http://stackoverflow.com/questions/5139403/whats-the-difference-of-configure-option-build-host-and-target">What&rsquo;s the difference of ./configure option &ndash;build, &ndash;host and &ndash;target?</a></li>
<li><a href="http://gcc.gnu.org/onlinedocs/gccint/Configure-Terms.html">GCC online documentation: 6.1 Configure Terms and History</a></li>
<li><a href="http://www.gnu.org/software/automake/manual/html_node/Cross_002dCompilation.htmlaut">Automake手冊：2.2.8 Cross-Compilation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU Make, Autotools, CMake 簡介投影片上線]]></title>
    <link href="http://wen00072.github.io/blog/2014/07/09/gnu-make-autotools-and-cmake-introduction-slides-on-line/"/>
    <updated>2014-07-09T17:39:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/07/09/gnu-make-autotools-and-cmake-introduction-slides-on-line</id>
    <content type="html"><![CDATA[<ul>
<li>Slideshare</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/36801801" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/zzz00072/gnu-make-autotools-cmake" title="GNU Make, Autotools, CMake 簡介" target="_blank">GNU Make, Autotools, CMake 簡介</a> </strong> from <strong><a href="http://www.slideshare.net/zzz00072" target="_blank">Wen Liao</a></strong> </div></p>

<ul>
<li>Speaker Deck</li>
</ul>


<script async class="speakerdeck-embed" data-id="46ad0fc0e9c001313be5762c67c15dde" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Autotools使用Libtool編譯函式庫]]></title>
    <link href="http://wen00072.github.io/blog/2014/05/20/autotools-to-use-libtool-compile-function-library/"/>
    <updated>2014-05-20T06:46:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/05/20/autotools-to-use-libtool-compile-function-library</id>
    <content type="html"><![CDATA[<p>前面討論了<a href="http://wen00072.github.io/blog/2014/05/13/study-on-gnu-build-system-autotools">Autotools</a>和<a href="http://wen00072.github.io/blog/2014/05/18/study-on-the-libtool">Libtool</a>，今天就來合體一下。其實只要把原本<a href="http://wen00072.github.io/blog/2014/05/13/study-on-gnu-build-system-autotools">Autotools</a>範例做少部份的修改就可以了。</p>

<p>目錄：</p>

<ul>
<li><a href="#preview">前情提要</a></li>
<li><a href="#ex">更動說明</a>

<ul>
<li><a href="#ex-conf">configure.ac</a></li>
<li><a href="#ex-libs">libs/Makefile.am</a></li>
<li><a href="#ex-src">src/Makefile.am</a></li>
<li><a href="#ex-result">執行結果</a></li>
</ul>
</li>
<li><a href="#ref">參考資料</a></li>
</ul>


<hr />

<p><a name = "preview"></a></p>

<h2>前情提要</h2>

<p>先複習一下</p>

<ul>
<li><p>Autotools</p>

<ul>
<li>目的是協助處理不同平台相依性的問題。</li>
<li>Autotools 產生

<ul>
<li>scripts用來偵測環境，最終產生平台相依的Makefile。</li>
<li>config.h存放不同設定。</li>
</ul>
</li>
<li>使用者最低限度的需要自己寫/更改

<ul>
<li>每個需要目錄中的<code>Makefile.am</code> 給automake產生Makefile.in。</li>
<li><code>configure.ac</code>給autotools中工具使用。</li>
</ul>
</li>
</ul>
</li>
<li><p>Libtool</p>

<ul>
<li>協助處理不同平台編譯以及link時相依性的問題。 (我自己想的，可能不精確。)

<ul>
<li>是一個script</li>
</ul>
</li>
<li>編譯會產生

<ul>
<li>原始檔衍生出來的兩個object 檔案，一個為標準object檔案，另外為<a href="http://en.wikipedia.org/wiki/Position-independent_code">PIC</a>版本

<ul>
<li>*.lo檔案描述該原始檔的metadata</li>
</ul>
</li>
<li>library

<ul>
<li>*.la檔案描述library的metadata</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<p><a name = "ex"></a></p>

<h2>更動說明</h2>

<p><a name = "ex-conf"></a></p>

<h3>configure.ac</h3>

<p>更動如下：</p>

<ul>
<li>拿掉<code>AC_PROG_RANLIB</code>，這邊libtool會幫忙處理</li>
<li>加入<code>LT_INIT</code>告訴autotool會使用libtool</li>
</ul>


<pre><code class="text configure.ac.diff">diff --git a/configure.ac b/configure.ac
index 7763f37..edec020 100644
--- a/configure.ac
+++ b/configure.ac
@@ -6,8 +6,8 @@ AC_INIT([Test_Autotools], [0], [test])
 AM_INIT_AUTOMAKE([foreign -Wall -Werror])
 AC_CONFIG_HEADERS([config.h])

-# Use static libary
-AC_PROG_RANLIB
+# USE libtool
+LT_INIT

 # Makefiles
 AC_CONFIG_FILES([Makefile src/Makefile libs/Makefile])
</code></pre>

<hr />

<p><a name = "ex-libs"></a></p>

<h3>libs/Makefile.am</h3>

<p>更動如下：</p>

<ul>
<li>把<code>LIBRARIES</code>改成<code>LTLIBRARIES</code></li>
<li>產生的目標為從<em>.a改成</em>.la</li>
</ul>


<pre><code class="text libs/Makefile.am.diff">diff --git a/libs/Makefile.am b/libs/Makefile.am
index f173ac6..230fa34 100644
--- a/libs/Makefile.am
+++ b/libs/Makefile.am
@@ -1,7 +1,8 @@
 AM_CFLAGS = -I../include
-lib_LIBRARIES = liba.a libb.a
-liba_a_SOURCES = liba.c
-libb_a_SOURCES = libb.c
+lib_LTLIBRARIES = liba.la libb.la
+liba_la_SOURCES = liba.c
+libb_la_SOURCES = libb.c
+

 include_HEADERS = ../include/liba.h ../include/libb.h
</code></pre>

<hr />

<p><a name = "ex-src"></a></p>

<h3>src/Makefile.am</h3>

<p>更動如下：</p>

<ul>
<li>指定link *.la
&#8220;`text src/Makefile.am.diff
diff &ndash;git a/src/Makefile.am b/src/Makefile.am
index 75a5199..b8b29bf 100644
&mdash; a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,4 +1,4 @@
-LDADD = ../libs/liba.a ../libs/libb.a
+LDADD = ../libs/liba.la ../libs/libb.la
AM_CFLAGS = -I../include</li>
</ul>


<p> bin_PROGRAMS = test
&#8220;`</p>

<hr />

<p><a name = "ex-result"></a></p>

<h3>執行結果</h3>

<p>簡單來說，autotool使用libtool產生<em>.a和</em>.so檔案</p>

<ul>
<li><p>執行
<code>
make distclean; autoreconf --install; ./configure --prefix=/tmp/test; make; make install
</code></p></li>
<li><p>先看/tmp/test安裝的檔案tree view
<code>
├── bin
│   └── test
├── include
│   ├── liba.h
│   └── libb.h
└── lib
  ├── liba.a
  ├── liba.la
  ├── liba.so -&gt; liba.so.0.0.0
  ├── liba.so.0 -&gt; liba.so.0.0.0
  ├── liba.so.0.0.0
  ├── libb.a
  ├── libb.la
  ├── libb.so -&gt; libb.so.0.0.0
  ├── libb.so.0 -&gt; libb.so.0.0.0
  └── libb.so.0.0.0
</code></p></li>
<li><p>make library 結果節錄
<code>
make[2]: Entering directory `libs'
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..    -I../include -g -O2 -MT liba.lo -MD -MP -MF .deps/liba.Tpo -c -o liba.lo liba.c
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -I.. -I../include -g -O2 -MT liba.lo -MD -MP -MF .deps/liba.Tpo -c liba.c  -fPIC -DPIC -o .libs/liba.o
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -I.. -I../include -g -O2 -MT liba.lo -MD -MP -MF .deps/liba.Tpo -c liba.c -o liba.o &gt;/dev/null 2&gt;&amp;1
mv -f .deps/liba.Tpo .deps/liba.Plo
/bin/bash ../libtool --tag=CC   --mode=link gcc -I../include -g -O2   -o liba.la -rpath /usr/local/lib liba.lo  
libtool: link: gcc -shared  -fPIC -DPIC  .libs/liba.o    -O2   -Wl,-soname -Wl,liba.so.0 -o .libs/liba.so.0.0.0
libtool: link: (cd ".libs" &amp;&amp; rm -f "liba.so.0" &amp;&amp; ln -s "liba.so.0.0.0" "liba.so.0")
libtool: link: (cd ".libs" &amp;&amp; rm -f "liba.so" &amp;&amp; ln -s "liba.so.0.0.0" "liba.so")
libtool: link: ar cru .libs/liba.a  liba.o
libtool: link: ranlib .libs/liba.a
libtool: link: ( cd ".libs" &amp;&amp; rm -f "liba.la" &amp;&amp; ln -s "../liba.la" "liba.la" )
</code></p></li>
<li><p>產生執行檔結果
<code>
gcc -DHAVE_CONFIG_H -I. -I..    -I../include -g -O2 -MT test.o -MD -MP -MF .deps/test.Tpo -c -o test.o test.c
mv -f .deps/test.Tpo .deps/test.Po
/bin/bash ../libtool --tag=CC   --mode=link gcc -I../include -g -O2   -o test test.o ../libs/liba.la ../libs/libb.la
libtool: link: gcc -I../include -g -O2 -o .libs/test test.o  ../libs/.libs/liba.so ../libs/.libs/libb.so
</code></p></li>
<li><p>ls libs/.libs
<code>
$ ls libs/.libs/
liba.a  liba.la  liba.lai  liba.o  liba.so  liba.so.0  liba.so.0.0.0  libb.a  libb.la  libb.lai  libb.o  libb.so  libb.so.0  libb.so.0.0.0
</code></p></li>
</ul>


<hr />

<p><a name = "ref"></a></p>

<h2>參考資料</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/8916425/how-to-create-a-shared-library-so-in-an-automake-script">How to create a shared library (.so) in an automake script?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU Build System: Autotools 初探]]></title>
    <link href="http://wen00072.github.io/blog/2014/05/13/study-on-gnu-build-system-autotools/"/>
    <updated>2014-05-13T10:43:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2014/05/13/study-on-gnu-build-system-autotools</id>
    <content type="html"><![CDATA[<p>身為組裝工，常常執行下面的指令</p>

<ul>
<li>./configure</li>
<li>make</li>
<li>組裝</li>
</ul>


<p>用了那麼久從來沒有思考過這是什麼樣的東西，慚愧之餘趕快惡補一下。</p>

<hr />

<h2>目錄</h2>

<ul>
<li><a href="#overview">Overview</a>

<ul>
<li><a href="#at-overview">Autotool 元件簡介</a></li>
<li><a href="#at-aconf">Autoconf</a></li>
<li><a href="#at-amake">Automake</a></li>
<li><a href="#at-ltool">Libtool</a></li>
<li><a href="#at-integrate">合體</a></li>
</ul>
</li>
<li><a href="#auto_ex">範例</a>

<ul>
<li><a href="#auto_ex_env">測試環境</a></li>
<li><a href="#auto_ex_prgs">測試程式</a></li>
<li><a href="#auto_ex_start">導入Autotools</a>

<ul>
<li><a href="#auto_ex_configac">configure.ac</a></li>
<li><a href="#auto_ex_maam">Makefile.am</a></li>
<li><a href="#auto_ex_config">產生<code>configure</code>並編譯</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ref">參考資料及資源</a></li>
</ul>


<hr />

<p><a name="overview"></a></p>

<h2>Overview</h2>

<h3>緣由：</h3>

<p>雖然C語言號稱高移植性，然而遺憾的是因為System call, library等介面早期並沒有規範。這造成使用C語言開發多平台軟體的時候需要針對不同的平台做許多的檢查。後來GNU針對這部份提出了autotool工具減輕開發的負擔。</p>

<p>如果懶得看元件簡介，請直接看<a href="#at-integrate">Overoview結論</a></p>

<hr />

<p><a name="at-overview"></a></p>

<h3>Autotool 元件</h3>

<p>從Wikipedia可以看到<a href="http://en.wikipedia.org/wiki/GNU_build_system">GNU Build system</a>的項目中有提到三個元件：
* <a href="#at-aconf">Autoconf</a>
* <a href="#at-amake">Automake</a>
* <a href="#at-ltool">Libtool</a></p>

<hr />

<p><a name="at-aconf"></a></p>

<h4><a href="http://www.gnu.org/software/autoconf">Autoconf - GNU Project - Free Software Foundation (FSF)</a></h4>

<p>從<a href="http://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Making-configure-Scripts.html#Making-configure-Scripts">這邊</a>可以看到<code>configure</code>負責產生</p>

<ul>
<li>Makefile

<ul>
<li>讓你編譯程式</li>
</ul>
</li>
<li>C option用的header file (optional)

<ul>
<li><code>config.h</code></li>
</ul>
</li>
<li><code>configure.status</code>

<ul>
<li>重新自動產生上面的資料</li>
</ul>
</li>
<li><code>configure.cache</code> (optional)

<ul>
<li>cache之前configure偵測的系統結果</li>
</ul>
</li>
</ul>


<p>套件中有幾個程式</p>

<ul>
<li><code>autoscan</code>

<ul>
<li>產生<code>configure.ac</code></li>
</ul>
</li>
<li><code>autoconf</code>

<ul>
<li>從<code>configure.ac</code>中產生<code>configure</code></li>
<li>為何是<code>或</code>呢？這和autoconf的版本有關</li>
</ul>
</li>
<li><code>autoheader</code>

<ul>
<li>從<code>configure.ac</code>產生<code>config.h.in</code></li>
</ul>
</li>
<li><code>ifnames</code>

<ul>
<li>掃描C原始碼，抽出ifdef的資訊</li>
</ul>
</li>
</ul>


<hr />

<p><a name="at-amake"></a></p>

<h4><a href="http://www.gnu.org/software/automake/">Automake - GNU Project - Free Software Foundation (FSF)</a></h4>

<p>套件中有兩個程式</p>

<ul>
<li>automake

<ul>
<li>從<code>Makefile.am</code>中產生<code>Makefile.in</code>，讓<code>configure</code>執行時可以產生<code>Makefile</code></li>
</ul>
</li>
<li>aclocal

<ul>
<li>從<code>configure.ac</code>或<code>configure.in</code>產生<code>aclocal.m4</code></li>
</ul>
</li>
</ul>


<hr />

<p><a name="at-ltool"></a></p>

<h4><a href="http://www.gnu.org/software/libtool/">GNU Libtool - The GNU Portable Library Tool</a></h4>

<ul>
<li>提供抽象化的介面處理函式庫的平台差異問題，本篇暫不討論。</li>
</ul>


<hr />

<p>另外GNU 其他針對移植性輔助的套件有</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Gettext">GNU gettext</a>

<ul>
<li>i18n套件，協助專案中的各國語言訊息開發。</li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Pkg-config">pkg-config</a>

<ul>
<li>提供開發時的函式庫資訊，開發者不需要知道函式庫的路徑和旗標，直接問pkg-config就好。</li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/GNU_Compiler_Collection">GCC</a>

<ul>
<li>全名是<code>GNU Compiler Collection</code></li>
</ul>
</li>
</ul>


<hr />

<p><a name="at-integrate"></a></p>

<h3>合體</h3>

<p>從Wikipedia的<a href="http://en.wikipedia.org/wiki/File:Autoconf-automake-process.svg">圖：Autoconf-automake-process</a>解釋的非常清楚。</p>

<p>回到最前面，我們可以觀察到autotool的目的就是</p>

<ul>
<li><strong>產生平台上可以編譯的環境</strong></li>
</ul>


<p>為了達到這樣的目的，系統需要做到下面的功能</p>

<ul>
<li>檢查平台環境</li>
<li>產生Makefile</li>
</ul>


<p>因此，開發者最少要告訴autotools <strong>所需平台環境</strong> 和 <strong>產生Makefile</strong> 這兩項資訊。這也是<code>configure.ac</code>和<code>Makefile.am</code>存在的目的。也就是說，開發者需要自行設定<code>configure.ac</code>和<code>Makefile.am</code>。</p>

<p>而這些錯綜複雜的關係可以描述如下</p>

<ul>
<li>autotool先產生<code>configure.ac</code> (透過<code>autoscan</code>或是自幹）</li>
<li><code>autoreconf</code>吃<code>configure.ac</code>和<code>Makefile.am</code>產生<code>confgure</code>, <code>config.h.in</code>, 和<code>Makefile.in</code></li>
<li>autoreconf細節

<ul>
<li>吃<code>configure.ac</code>，呼叫<code>aclocal</code>產生<code>aclocal.m4</code></li>
<li>aclocal是給autotools中自訂專案檢查編譯巨集用。

<ul>
<li>吃<code>configure.ac</code>和<code>aclocal.m4</code>，呼叫<code>autoheader</code>產生<code>config.h.in</code></li>
<li>吃<code>configure.ac</code>和<code>aclocal.m4</code>，呼叫<code>autoconf</code>產生<code>configure</code></li>
<li>吃<code>configure.ac</code>和<code>aclocal.m4</code>和各處的<code>Makefile.am</code>，呼叫<code>automake</code>產生<code>Makefile.in</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<hr />

<p><a name="auto_ex"></a></p>

<h2>範例</h2>

<hr />

<p><a name="auto_ex_env"></a></p>

<h3>測試環境</h3>

<ul>
<li>Ubuntu 12.04.4</li>
</ul>


<hr />

<p><a name="auto_ex_prgs"></a></p>

<h3>測試程式</h3>

<p><a href="http://wen00072.github.io/blog/2014/06/07/dry-test-file-template">範例程式細節在這邊</a>，檔案各別重新分配到<code>src</code>, <code>include</code>, <code>libs</code>這三個目錄。不想看code只要知道每個檔案都有參考到某個自訂的header file就好了。</p>

<pre><code class="text 測試程式樹狀架構">├── include
│   ├── liba.h
│   └── libb.h
├── libs
│   ├── liba.c
│   └── libb.c
└── src
    └── test.c
</code></pre>

<hr />

<p><a name="auto_ex_start"></a></p>

<h3>導入Autotools</h3>

<p>簡述一下流程</p>

<ul>
<li>使用<code>autoscan</code>產生<code>configure.ac</code>範本</li>
<li>手動更改<code>configure.ac</code></li>
<li>寫<code>Makefile.am</code>，根目錄以及需要編譯的地方都要一份</li>
<li><code>autoreconf --install</code>產生檔案

<ul>
<li>替代方案：執行下面程式

<ul>
<li><code>aclocal</code></li>
<li><code>autoheader</code></li>
<li><code>automake --add-missing</code></li>
<li><code>autoconf</code></li>
</ul>
</li>
</ul>
</li>
<li><code>configure</code></li>
<li><code>make</code></li>
<li><code>make install</code>安裝或<code>make dist</code>打包</li>
</ul>


<hr />

<p><a name="auto_ex_configac"></a></p>

<h4>configure.ac</h4>

<p>執行<code>autoscan</code>後會產生<code>configure.scan</code>檔案，把這個檔案rename成<code>configure.ac</code></p>

<pre><code class="makefile configure.ac最初範本">#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.68])
AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])
AC_CONFIG_SRCDIR([libs/libb.c])
AC_CONFIG_HEADERS([config.h])

# Checks for programs.
AC_PROG_CC

# Checks for libraries.

# Checks for header files.
AC_CHECK_HEADERS([stdlib.h])

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.
AC_FUNC_MALLOC

AC_CONFIG_FILES([Makefile
                 libs/Makefile
                 src/Makefile])
AC_OUTPUT
</code></pre>

<p>接下來就是更動<code>configure.ac</code>，更動完和原本的差別如下：
&#8220;`text configure.scan和configure.ac 差別
5,6c5,6
&lt; AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])</p>

<h2>&lt; AC_CONFIG_SRCDIR([libs/libb.c])</h2>

<blockquote><p>AC_INIT([Test_Autotools], [0], [test])
AM_INIT_AUTOMAKE([foreign -Wall -Werror])
8a9,14</p>

<h1>Use static libary</h1>

<p>AC_PROG_RANLIB</p>

<p>&#8220;`
簡單說明如下</p></blockquote>

<ul>
<li>更改套件版本資訊</li>
<li>刪除<code>AC_CONFIG_SRCDIR</code></li>
<li>設定automake

<ul>
<li><code>foreign</code>表示這不是標準的GNU Coding Standard，因此不會檢查額外的檔案如<code>NEWS</code>, <code>README</code>, <code>ChangeLog</code>等。</li>
<li>共用編譯參數</li>
</ul>
</li>
<li><code>AC_PROG_RANLIB</code>表示要使用static library</li>
</ul>


<hr />

<p><a name="auto_ex_maam"></a></p>

<h4>Makefile.am</h4>

<p>前面提到，每個目錄都要有一個<code>Makefile.am</code>。關於<code>Makefile.am</code>語法，可以參考 <a href="https://www.lrde.epita.fr/~adl/autotools.html">Alexandre Duret Lutz: Autotools Tutorial</a>大略了解。更詳細的部份可以看<a href="http://www.gnu.org/software/automake/manual/html_node/A-Shared-Library.html#A-Shared-Library">Automake手冊：8.3 Building a Shared Library</a></p>

<p>範例中<code>Makefile.am</code>如下：</p>

<ul>
<li>./Makefile.am：　基本上就是依照列出的順序編譯</li>
</ul>


<pre><code class="makefile ./Makefile.am">SUBDIRS = libs src
</code></pre>

<ul>
<li>libs/Makefile.am</li>
</ul>


<pre><code class="makefile libs/Makefile.am">AM_CFLAGS = -I../include
lib_LIBRARIES = liba.a libb.a
liba_a_SOURCES = liba.c
libb_a_SOURCES = libb.c

include_HEADERS = ../include/liba.h ../include/libb.h
</code></pre>

<p>最上面形式就是<code>要裝到目錄</code>_<code>Keyword</code>，所以表示我們要產生<code>liba.a</code>和<code>libb.a</code>，安裝時放在<code>/usr/local/lib</code>下面、指定library由哪些原始程式檔案組成、同時要把header files放在<code>/usr/local/include</code>下。(configure沒指定預設prefix為/usr/local)</p>

<ul>
<li>src/Makefile.am</li>
</ul>


<pre><code class="makefile src/Makefile.am">LDADD = ../libs/liba.a ../libs/libb.a
AM_CFLAGS = -I../include

bin_PROGRAMS = test
test_SOURCES = test.c
</code></pre>

<p>一樣的形式：<code>要裝到目錄</code>_<code>Keyword</code>。這邊宣告要安裝到<code>/usr/loca/bin</code>、要link <code>liba.a</code>和<code>libb.a</code>、並且5指定執行檔的原始程式檔案。</p>

<hr />

<p>經過上面的處理，我們多了三個<code>Makefile.am</code>和<code>configure.ac</code>以及一些暫存檔案。新的樹狀目錄列表如下：
<code>text autoscan後測試程式樹狀架構
.
├── autom4te.cache
│   ├── output.0
│   ├── requests
│   └── traces.0
├── autoscan.log
├── configure.ac
├── include
│   ├── liba.h
│   └── libb.h
├── libs
│   ├── liba.c
│   ├── libb.c
│   └── Makefile.am
├── Makefile.am
└── src
    ├── Makefile.am
    └── test.c
</code></p>

<hr />

<p><a name="auto_ex_config"></a></p>

<h4>產生<code>configure</code>並編譯</h4>

<p>如前所述，直接使用<code>autoreconf --install</code>就可以了
<code>``text autoreconf --install以及之後的測試程式樹狀架構
$ autoreconf --install  
configure.ac:6: installing</code>./install-sh&#8217;
configure.ac:6: installing <code>./missing'
libs/Makefile.am: installing</code>./depcomp&#8217;</p>

<p>.
├── aclocal.m4
├── autom4te.cache
│   ├── output.0
│   ├── output.1
│   ├── output.2
│   ├── requests
│   ├── traces.0
│   ├── traces.1
│   └── traces.2
├── autoscan.log
├── config.h.in
├── configure
├── configure.ac
├── depcomp
├── include
│   ├── liba.h
│   └── libb.h
├── install-sh
├── libs
│   ├── liba.c
│   ├── libb.c
│   ├── Makefile.am
│   └── Makefile.in
├── Makefile.am
├── Makefile.in
├── missing
└── src
    ├── Makefile.am
    ├── Makefile.in
    └── test.c
&#8220;`</p>

<p>./configure結果節錄如下
<code>
$ ./configure --prefix=/tmp/build
checking for a BSD-compatible install... /usr/bin/install -c
...
checking for GNU libc compatible malloc... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating libs/Makefile
config.status: creating config.h
config.status: config.h is unchanged
config.status: executing depfiles commands
</code>
幾點要注意的：</p>

<ul>
<li><code>config.status</code>被產生，並且被執行時生出<code>config.h</code>以及各目錄的的<code>Makefile</code></li>
<li>這邊指定prefix為<code>/tmp/build</code>，因此<code>make install</code>可以看到被安裝目錄樹狀結構如下：</li>
</ul>


<pre><code class="text 安裝目錄樹狀結構">.
├── bin
│   └── test
├── include
│   ├── liba.h
│   └── libb.h
└── lib
    ├── liba.a
    └── libb.a
</code></pre>

<hr />

<p><a name="ref"></a></p>

<h2>參考資料及資源</h2>

<p>強烈推荐 <a href="https://www.lrde.epita.fr/~adl/autotools.html">Alexandre Duret Lutz: Autotools Tutorial</a>，主要的想法和資料都是從這邊出來。而且他寫的更加詳細、更加易懂。</p>

<ul>
<li>FSF官方資料:

<ul>
<li><a href="http://www.gnu.org/software/autoconf">Autoconf - GNU Project - Free Software Foundation (FSF)</a></li>
<li><a href="http://www.gnu.org/software/automake/">Automake - GNU Project - Free Software Foundation (FSF)</a></li>
<li><a href="http://www.gnu.org/software/libtool/">GNU Libtool - The GNU Portable Library Tool</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/GNU_build_system">Wikipedia: GNU build system</a></li>
<li><a href="http://en.wikipedia.org/wiki/Autoconf">Wikipedia: Autoconf</a></li>
<li><a href="http://netlab.cse.yzu.edu.tw/~armor/columns/automake/automake.htm">陳雍穆: automake</a></li>
<li><a href="http://fourdollars.github.io/autotools/#1">$4: GNU Build System (aka Autotools)</a></li>
<li><a href="http://blog.roodo.com/rocksaying/archives/12687975.html">石頭閒語: Hello Autoconf, the GNU Build System</a></li>
<li><a href="http://www.xinotes.net/notes/note/1824/">GNU autoconf (automake) &ldquo;Hello World&rdquo; step-by-step example  </a></li>
<li><a href="https://www.lrde.epita.fr/~adl/autotools.html">Alexandre Duret Lutz: Autotools Tutorial</a></li>
<li><a href="https://www.flameeyes.eu/autotools-mythbuster/index.html">Autotools Mythbuster</a></li>
<li><a href="http://tetralet.luna.com.tw/?op=ViewArticle&amp;articleId=200&amp;blogId=1">今天的 Tetralet 又在唧唧喳喳了: 利用 Autotools 來建立 Makefile 檔案</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

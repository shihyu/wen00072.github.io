<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Got | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/got/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2016-07-25T12:05:47+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[談談 Git Remote]]></title>
    <link href="http://wen00072.github.io/blog/2016/01/24/talk-about-git-remote/"/>
    <updated>2016-01-24T20:30:32+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/01/24/talk-about-git-remote</id>
    <content type="html"><![CDATA[<ul>
<li>更新：

<ul>
<li>Apr/09/2016：感謝網友柏瑀的告知，修正白字。</li>
</ul>
</li>
</ul>


<p>git remote 是一個常常被忽略的東西，這次就來看看這個指令和對應的觀念吧。</p>

<p>一樣，先講測試環境，避免無法reproduce的問題。</p>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.3 LTS
Release:    14.04
Codename:   trusty

$ git --version
git version 2.7.0
</code></pre>

<p>本次介紹目錄如下</p>

<ul>
<li><a href="#gr_gb">背景說明</a></li>
<li><a href="#gr_cmd">git remote指令介紹</a>

<ul>
<li><a href="#gr_cmd_status">查詢remote資訊</a></li>
<li><a href="#gr_cmd_add">新增remote</a></li>
<li><a href="#gr_cmd_fetch">拉remote repository</a></li>
<li><a href="#gr_cmd_push">remote的branch操作</a></li>
<li><a href="#gr_cmd_rm">刪除remote</a></li>
</ul>
</li>
</ul>


<p><a name="gr_gb"></a></p>

<h2>背景說明</h2>

<p>先來問問男人<code>git remote</code>是什麼吧？</p>

<pre><code>GIT-REMOTE(1)                                     Git Manual                                    GIT-REMOTE(1)

NAME
       git-remote - Manage set of tracked repositories
</code></pre>

<p>白話來說，<code>git remote</code>是用來管理<font color="red">多個</font>tracked repositories。（中文難翻，意思是你要追蹤的git repository）。在大部分的情況，<code>git clone</code>下來後只需要和原本clone的遠端互動的話，你只有一個remote，那麼你機乎不會感受到remote的運作，我天生駑鈍，剛開始只是覺得奇怪怎麼有時候後會有個<code>origin</code>跑出來而已。</p>

<p>如果夠幸運（還是不幸？）你不太會需要遇到需要處理remote的情況。不過在github上面，倒是蠻有機會要用到remote，情境如下。</p>

<ul>
<li>你在github上面有帳號，要fork別人的project <code>A</code>，fork來的稱為<code>A+</code></li>
<li>你在<code>A+</code>開發，同時<code>A</code>也在開發</li>
<li><code>A+</code>有需要和<code>A</code>同步，也許是<code>A</code>有新功能，或是你要回饋程式碼總不能回饋和<code>A</code>差異太大的程式碼</li>
</ul>


<p><code>A+</code>和<code>A</code>同步，是remote常用的情境。常用到github直接給<a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/">懶人包</a>。大概描述如下：</p>

<ul>
<li><code>A+</code>加一個remote，URL為<code>A</code>的URL。白話來說，就是<code>A+</code>要track repository <code>A</code>。

<ul>
<li>remote必須給個名字，github的<a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/">懶人包</a>上給的名字叫upstream。</li>
</ul>
</li>
<li>既然加了一個tracked repository，你就可以做

<ul>
<li>拉remote程式碼下來</li>
<li>切換到remote下面的branch</li>
<li><strong>merge remote 的branch</strong></li>
</ul>
</li>
</ul>


<p><a name="gr_cmd"></a></p>

<h2>git remote指令介紹</h2>

<p>在介紹指令之前，先建立示範git repository 以便下面的說明。情境如下</p>

<ol>
<li>建立新的git repository，稱為<code>repo_1</code></li>
<li>clone <code>repo_1</code>到<code>repo_2</code></li>
<li>clone <code>repo_2</code>到<code>repo_3</code></li>
</ol>


<pre><code>$ git init repo_1
Initialized empty Git repository in /tmp/test_remote/repo_1/.git/

$ cd repo_1/
/repo_1$ touch test_file &amp;&amp; git add test_file &amp;&amp; git commit -a -m "init for test"
[master (root-commit) 6847c3c] init for test
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test_file

$ cd ../

$ git clone --bare repo_1 repo_2 
Cloning into bare repository 'repo_2'...
done.

$ git clone repo_2/ repo_3
Cloning into 'repo_3'...
done.
</code></pre>

<p>關於repo_2的&ndash;bare部份，一言難盡。長話短說，不這樣幹repo_3不能push到repo_2，有興趣可以看<a href="http://stackoverflow.com/questions/2816369/git-push-error-remote-rejected-master-master-branch-is-currently-checked">這邊</a>。</p>

<p>如果你的git repository是clone過來的，一定會有一個預設remote。沒意外的會叫<code>origin</code> <del>(什麼？你的remote叫<code>aosp</code>? 呃太複雜不討論)</del>，接下來你可以對於remote 操作，分別說明如下：</p>

<ul>
<li><a href="#gr_cmd_status">查詢remote資訊</a></li>
<li><a href="#gr_cmd_add">新增remote</a></li>
<li><a href="#gr_cmd_fetch">拉remote repository</a></li>
<li><a href="#gr_cmd_push">remote的branch操作</a></li>
<li><a href="#gr_cmd_rm">刪除remote</a></li>
</ul>


<p><a name="gr_cmd_status"></a></p>

<h2>查詢remote資訊</h2>

<ul>
<li><code>git remote</code>

<ul>
<li>顯示remote名稱</li>
</ul>
</li>
<li><code>git remote -v</code>

<ul>
<li>顯示remote名稱及remote URL</li>
</ul>
</li>
<li><code>git remote show remote名稱</code>

<ul>
<li>顯示<code>remote名稱</code>的詳細資訊</li>
</ul>
</li>
</ul>


<p>直接看範例</p>

<pre><code>$ cd /tmp/test_remote/repo_3

$ git remote
origin

$ git remote -v
origin  /tmp/test_remote/repo_2/ (fetch)
origin  /tmp/test_remote/repo_2/ (push)

$ git remote show origin 
* remote origin
  Fetch URL: /tmp/test_remote/repo_2/
  Push  URL: /tmp/test_remote/repo_2/
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p><a name="gr_cmd_add"></a></p>

<h2>新增remote</h2>

<ul>
<li><code>git add remote名稱 remote_repository_URL</code></li>
</ul>


<p>範例如下</p>

<pre><code>$ git remote add upstream /tmp/test_remote/repo_1/

$ git remote -v
origin  /tmp/test_remote/repo_2/ (fetch)
origin  /tmp/test_remote/repo_2/ (push)
upstream    /tmp/test_remote/repo_1/ (fetch)
upstream    /tmp/test_remote/repo_1/ (push)
</code></pre>

<p>新增完畢後，請記得<code>remote_名稱</code>、<code>remote_名稱 remote_branch_名稱</code>或<code>remote_名稱/remote_branch_名稱</code>是你要操作remote的參數。</p>

<p>另外你還可以加入多個remote來場大亂鬥。例如你從<code>A</code> fork <code>A+</code>，也許有人fork 出來的<code>A++</code>有你想要的功能，就可以再把<code>A++</code>加入你<code>A</code> repository的remote。</p>

<p><a name="gr_cmd_fetch"></a></p>

<h2>拉remote repository</h2>

<ul>
<li><code>git fetch remote_名稱</code></li>
<li><code>git pull remote_名稱/remote_branch_名稱</code></li>
</ul>


<p>我們先在<code>repo_1</code>開一個branch稱為<code>br1</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /tmp/test_remote/repo_1/&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git checkout -b br1
</span><span class='line'>Switched to a new branch &lsquo;br1&rsquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ touch test_on_branch &amp;&amp; git add test_on_branch &amp;&amp; git commit test_on_branch -m &ldquo;test&rdquo;
</span><span class='line'>[br1 cc7222f] test
</span><span class='line'> 1 file changed, 0 insertions(+), 0 deletions(-)
</span><span class='line'> create mode 100644 test_on_branch</span></code></pre></td></tr></table></div></figure></p>

<p>接下來就是範例時間
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch upstream
</span><span class='line'>From /tmp/test_remote/repo_1
</span><span class='line'> * [new branch]      br1        -&gt; upstream/br1
</span><span class='line'> * [new branch]      master     -&gt; upstream/master&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ ls
</span><span class='line'>test_file&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git pull upstream br1
</span><span class='line'>From /tmp/test_remote/repo_1
</span><span class='line'> * branch            br1        -&gt; FETCH_HEAD
</span><span class='line'>Updating 6847c3c..cc7222f
</span><span class='line'>Fast-forward
</span><span class='line'> test_on_branch | 0
</span><span class='line'> 1 file changed, 0 insertions(+), 0 deletions(-)
</span><span class='line'> create mode 100644 test_on_branch&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ ls
</span><span class='line'>test_file  test_on_branch&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is ahead of &lsquo;origin/master&rsquo; by 1 commit.
</span><span class='line'>  (use &ldquo;git push&rdquo; to publish your local commits)
</span><span class='line'>nothing to commit, working directory clean
</span><span class='line'>&lt;code&gt;``
</span><span class='line'>注意最後的指令，因為我們pull了&lt;/code&gt;upstream/br1&lt;code&gt;，所以local多了一個commit。因此訊息中有說你目前repository 比&lt;/code&gt;origin/master&lt;code&gt;(你clone的remote/branch)多一個commit。你可以push回&lt;/code&gt;origin/master`。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a name="gr_cmd_push"&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;remote的branch操作&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原則就是命令中有參數會是&lt;code&gt;remote_名稱&lt;/code&gt;、&lt;code&gt;remote_名稱 remote_branch_名稱&lt;/code&gt;或&lt;code&gt;remote_名稱/remote_branch_名稱&lt;/code&gt;。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;切換</span></code></pre></td></tr></table></div></figure>
$ git checkout upstream/br1
Note: checking out &lsquo;upstream/br1&rsquo;.</li>
</ul>


<p>You are in &lsquo;detached HEAD&rsquo; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.</p>

<p>If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:</p>

<p>  git checkout -b <new-branch-name></p>

<p>HEAD is now at bd026e3&hellip; test
&#8220;`
中間的一堆英文簡單來說是因為git checkout沒特別參數，git只是把HEAD指到命令中的hash而已。如果你要同時在local開一個branch，可以這樣幹：</p>

<pre><code>$ git checkout --track  upstream/br1 
Branch br1 set up to track remote branch br1 from upstream.
Switched to a new branch 'br1'
</code></pre>

<ul>
<li>merge</li>
</ul>


<pre><code># 先在upstream/br1建立新的commit
$ cd /tmp/test_remote/repo_1/

$ touch test1_on_branch &amp;&amp; git add test1_on_branch &amp;&amp; git commit test1_on_branch -m "test1"
[br1 d82612a] test1
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test1_on_branch

# 切回repo_3
cd /tmp/test_remote/repo_3

# 先fetch
$ git fetch upstream 
remote: Counting objects: 2, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 2 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (2/2), done.
From /tmp/test_remote/repo_1
   bd026e3..d82612a  br1        -&gt; upstream/br1

# 再merge，事實上和git pull upstream br1 一樣效果（默）
$ git merge upstream/br1 
Updating bd026e3..d82612a
Fast-forward
 test1_on_branch | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 test1_on_branch
</code></pre>

<p><a name="gr_cmd_rm"></a></p>

<h2>刪除remote</h2>

<ul>
<li>git remote remove remote名稱</li>
</ul>


<p>範例如下</p>

<pre><code>$ git remote remove upstream 

$ git remote -v
origin  /tmp/test_remote/repo_2 (fetch)
origin  /tmp/test_remote/repo_2 (push)
</code></pre>
]]></content>
  </entry>
  
</feed>

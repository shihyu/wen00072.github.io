<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | My code works, I don't know why.]]></title>
  <link href="http://wen00072.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://wen00072.github.io/"/>
  <updated>2016-10-03T16:38:07+08:00</updated>
  <id>http://wen00072.github.io/</id>
  <author>
    <name><![CDATA[Wen Liao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用gdb 靜態分析C 語言名稱和參數相同函數的原始檔位置]]></title>
    <link href="http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb/"/>
    <updated>2016-10-03T14:36:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2016/10/03/locate-function-source-code-via-gdb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>感謝<a href="http://scottt.tw/">Scott</a>大大的資訊。</p>

<p>忘記那邊看過的名言：「手上有了新玩具，就會想要馬上拿來用。」</p>

<h2>動機</h2>

<p>組裝軟體的時候，有一件事很讓我困擾。那就是當整包SDK有兩個以上名稱和參數相同的函數的時候。當這種情況發生時，trace code就很麻煩，你必須要花時間釐清到底最後會使用到那一個函數。而這些config可能用下面兩種方式切換這些名稱和參數相同的函數：</p>

<ol>
<li>巨集

<ul>
<li><code>#if</code></li>
<li><code>#ifdef</code></li>
</ul>
</li>
<li>Makefile

<ul>
<li>在檔案中根據不同變數編譯不同的檔案</li>
</ul>
</li>
</ol>


<p>我以前會視情況用下面兩種方法找到該函數編譯實際使用的原始檔位置</p>

<ol>
<li>下毒藥，只要相同名字的函數都塞入<code>#error 可以辨別的字串</code>。編譯時根據錯誤訊息判斷使用哪個函數</li>
<li>gdb設斷點，runtime透過中斷函數的方式取得函數的檔案和行號</li>
</ol>


<p>不過<a href="http://scottt.tw/">Scott</a>大大的今天給的資訊讓我可以更省力的處理這個問題了。</p>

<p>如果只想要知道用法，看完下面指令就可以收工回家了。</p>

<pre><code class="sh">gdb -ex 'file 你的執行檔或是shared library檔' -ex 'info line 要查的函數' -ex 'quit'
</code></pre>

<p>當然用<code>gdb</code>編譯時不要忘記加debug option。</p>

<h2>目錄</h2>

<ul>
<li><a href="#gds_env">測試環境</a></li>
<li><a href="#gds_files">測試檔案</a>

<ul>
<li><a href="#gds_files_1">test_same_func.c</a></li>
<li><a href="#gds_files_2">same_func1.c</a></li>
<li><a href="#gds_files_3">same_func2.c</a></li>
<li><a href="#gds_files_mk">Makefile</a></li>
</ul>
</li>
<li><a href="#gds_test">測試結果</a></li>
<li><a href="#gds_ref">延伸資料</a></li>
</ul>


<p><a name="gds_env"></a></p>

<h2>測試環境</h2>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.5 LTS
Release:    14.04
Codename:   trusty
</code></pre>

<p><a name="gds_files"></a></p>

<h2>測試檔案</h2>

<p>簡單來說，就是實作切換兩種方式同樣名稱和參數的函數：</p>

<ol>
<li>巨集</li>
<li>Makefile</li>
</ol>


<p>所以我們會有</p>

<ol>
<li><a href="#gds_files_1">測試檔案進入點</a></li>
<li><a href="#gds_files_2">測試檔一</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔二完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_3">測試檔二</a>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和測試檔一完全一模一樣</li>
</ul>
</li>
<li><a href="#gds_files_mk">Makefile</a>

<ul>
<li>除了編譯以外，還提供兩個變數，由command line傳入

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>


<p><a name="gds_files_1"></a></p>

<h3>test_same_func.c</h3>

<ul>
<li>測試檔案進入點，呼叫func1()。func1()在compile time才被決定</li>
</ul>


<pre><code class="c test_same_func.c">#include &lt;stdio.h&gt;
extern void func1(void);

int main()
{
    printf("Hello World\n");
    func1();

    return 0;
}
</code></pre>

<p><a name="gds_files_2"></a></p>

<h3>same_func1.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_2">same_func2</a>完全一模一樣</li>
</ul>


<pre><code class="c same_func1.c">#include &lt;stdio.h&gt;

#if OP1
void func1(void)
{
    printf("%s: %s_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#else
void func1(void)
{
    printf("%s: %s_NOT_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#endif
</code></pre>

<p><a name="gds_files_3"></a></p>

<h3>same_func2.c</h3>

<ul>
<li>實作使用巨集<code>OP1</code>切換同樣名稱和參數</li>
<li>和<a href="#gds_files_1">same_func1</a>完全一模一樣</li>
</ul>


<pre><code class="c same_func2.c">#include &lt;stdio.h&gt;

#if OP1
void func1(void)
{
    printf("%s: %s_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#else
void func1(void)
{
    printf("%s: %s_NOT_OP1\n", __FILE__, __PRETTY_FUNCTION__);
}
#endif
</code></pre>

<p><a name="gds_files_mk"></a></p>

<h3>Makefile</h3>

<p>提供兩個變數，由command line傳入</p>

<ul>
<li>USE_FILE=1

<ul>
<li>沒傳入時預設編譯<font color="red"><strong>測試檔二</strong></font>，當該參數傳入<code>USE_FILE=1</code>時會變成編譯<font color="red"><strong>測試檔一</strong></font></li>
</ul>
</li>
<li>EN_OP1=1

<ul>
<li>當該參數傳入時才會開啟<code>OP1</code>巨集</li>
</ul>
</li>
</ul>


<pre><code class="makefile">CFLAGS+=-Wall -Werror -g3
TARGET=test_same_func
SRCS=test_same_func.c

ifeq ($(USE_FILE), 1)
    SRCS += same_func1.c
else
    SRCS += same_func2.c
endif

ifeq ($(EN_OP1), 1)
    CFLAGS += -DOP1=1
endif

OBJS=$(patsubst %.c, %.o, $(SRCS))

$(TARGET): $(OBJS)
    $(CC) -o $@ $^
    gdb -ex 'file $@' -ex 'info line func1' -ex 'quit'

%.o: %.c
    $(CC) $(CFLAGS) -c $^

clean:
    rm *.o *~ $(TARGET) -f
</code></pre>

<p><a name="gds_test"></a></p>

<h2>測試結果</h2>

<p>前面提過，<code>func1()</code>的實作受兩個變數影響，分別為</p>

<ol>
<li>巨集<code>OP1</code>是否有設定

<ul>
<li>只有<code>OP1</code> 被設定<strong>並且</strong>非零時才會進入<code>OP1</code>的<code>func1()</code></li>
</ul>
</li>
<li>Makefile變數<code>USE_FILE</code>是否有設定

<ul>
<li>只有<code>USE_FILE</code>為1的時候才會使用<code>same_func1.c</code>，其他情形都編譯<code>same_func2.c</code></li>
</ul>
</li>
</ol>


<p>所以我們make 指令有下面四種變化</p>

<ol>
<li><a href="">巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</a></li>
<li><a href="">設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</a></li>
<li><a href="">巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></a></li>
<li><a href="">全部設定巨集<code>OP1</code>和<code>USE_FILE</code></a></li>
</ol>


<p><a name=""></a></p>

<h3>巨集<code>OP1</code>和<code>USE_FILE</code>都沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean 
default settings: OP1 disable and use same_func1.c
rm *.o *~ test_same_func -f

$ make
cc -Wall -Werror -g3 -c test_same_func.c
cc -Wall -Werror -g3 -c same_func2.c
cc -o test_same_func test_same_func.o same_func2.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 11 of "same_func2.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func2.c: func1_NOT_OP1
</code></pre>

<p><a name=""></a></p>

<h3>設定巨集<code>OP1</code>，<code>USE_FILE</code>沒設定</h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func2.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make EN_OP1=1
cc -Wall -Werror -g3 -DOP1=1 -c test_same_func.c
cc -Wall -Werror -g3 -DOP1=1 -c same_func2.c
cc -o test_same_func test_same_func.o same_func2.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 5 of "same_func2.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func2.c: func1_OP1
</code></pre>

<p><a name=""></a></p>

<h3>巨集<code>OP1</code>沒設定，但是設定<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用非<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make USE_FILE=1
cc -Wall -Werror -g3 -c test_same_func.c
cc -Wall -Werror -g3 -c same_func1.c
cc -o test_same_func test_same_func.o same_func1.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 11 of "same_func1.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func1.c: func1_NOT_OP1
</code></pre>

<p><a name=""></a></p>

<h3>全部設定巨集<code>OP1</code>和<code>USE_FILE</code></h3>

<p>gdb驗證結果的確是</p>

<ol>
<li>編譯<code>same_func1.c</code></li>
<li>使用<code>OP1</code>版本的<code>func1()</code></li>
</ol>


<pre><code class="sh">$ make clean
rm *.o *~ test_same_func -f

$ make EN_OP1=1 USE_FILE=1
cc -Wall -Werror -g3 -DOP1=1 -c test_same_func.c
cc -Wall -Werror -g3 -DOP1=1 -c same_func1.c
cc -o test_same_func test_same_func.o same_func1.o

$ gdb -ex 'file test_same_func' -ex 'info line func1' -ex 'quit'
...
Line 5 of "same_func1.c" starts at address 0x400597 &lt;func1&gt; and ends at 0x40059b &lt;func1+4&gt;.
Hello World
same_func1.c: func1_OP1
</code></pre>

<p><a name="gds_ref"></a></p>

<h2>延伸資料</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1w1nPmCLpeRN3kEYglzHwozhWXY0ddT9oe6JCZocsPNE/edit">Using GDB to Help You Read Linux Kernel Code without Running It</a>

<ul>
<li><a href="http://scottt.tw/">Scott</a>大大的文件，描述使用gdb 靜態分析Linux kernel的技巧</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[談談strip]]></title>
    <link href="http://wen00072.github.io/blog/2015/11/16/tan-tan-strip/"/>
    <updated>2015-11-16T21:32:23+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/11/16/tan-tan-strip</id>
    <content type="html"><![CDATA[<p>Strip，顧名思義，就是脫脫。有興趣的紳士可以估狗strip club。那麼在Linux的binutil中strip是要脫什麼呢？先來問一下男人</p>

<pre><code class="text man strip">STRIP(1)                                    GNU Development Tools                                    STRIP(1)

NAME
       strip - Discard symbols from object files.
...
</code></pre>

<p>用中文說，就是從object 檔中把symbol丟掉。讓我們做幾個小實驗吧。</p>

<ul>
<li><a href="#strip_test1">測試一：Strip 執行檔</a></li>
<li><a href="#strip_test2">測試二：Strip Object檔</a></li>
<li><a href="#strip_test3">測試三：Strip debug 資訊</a></li>
<li><a href="#strip_test4">測試四：Strip shared library</a></li>
</ul>


<h2>測試環境</h2>

<pre><code class="text">$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 14.04.3 LTS
Release:    14.04
Codename:   trusty
</code></pre>

<h2>測試程式</h2>

<pre><code class="c main_test.c">#include &lt;stdio.h&gt;
extern test();

int main(void)
{
    test();

    return 0;
}
</code></pre>

<pre><code class="c test.c">#include &lt;stdio.h&gt;

char *g_myStr = "Wen";
static char *gp_myStr = "Liao";

static void s_test(void)
{
    printf("%s %s\n", g_myStr, gp_myStr);
}


void test(void)
{
    printf("Hello ");
    s_test();
}
</code></pre>

<pre><code class="Makefile Makefile">TARGET=test
SRCS=test.c main_test.c
OBJS=$(patsubst  %.c, %.o, $(SRCS))
CFLAGS=-g

$(TARGET): $(OBJS)
    $(CC) $(CFLAGS) $^ -o $@

clean:
    rm -rf $(TARGET) $(OBJS)
</code></pre>

<p><a name="strip_test1"></a></p>

<h2>測試一：Strip 執行檔</h2>

<pre><code class="text">$ make clean
rm -rf test  test.o  main_test.o

$ make
cc -g   -c -o test.o test.c
cc -g   -c -o main_test.o main_test.c
cc -g test.o main_test.o -o test

$ ./test 
Hello Wen Liao

$ ls test -gG
-rwxrwxr-x 1 10217 Nov 16 22:33 test
</code></pre>

<p>可以看到產生出來的執行檔有<code>10217</code> bytes。我們進一步來看執行檔的symbol。</p>

<pre><code class="text">$ nm test
0000000000601050 B __bss_start
...
0000000000601040 D g_myStr
00000000004003e0 T _init
...
0000000000601048 d gp_myStr
...
000000000040056d T main
                 U printf@@GLIBC_2.2.5
...
000000000040052d t s_test
0000000000400553 T test
0000000000601050 D __TMC_END__
</code></pre>

<p>那麼來看看strip後的檔案size和symbol吧。你可以看到size變小而且symbol不見了。另外上面可以比對一下<code>t</code>、<code>T</code>、<code>d</code>、<code>D</code>和<code>s_test</code>、<code>test</code>、<code>gp_myStr</code>、<code>g_myStr</code>的關係。</p>

<pre><code class="text">$ strip test

$ ./test 
Hello Wen Liao

$ nm test
nm: test: no symbols

$ ls -gG test
-rwxrwxr-x 1 6296 Nov 16 22:36 test
</code></pre>

<p><a name="strip_test2"></a></p>

<h2>測試二：Strip Object檔</h2>

<p>因為strip就是把object file (執行檔也是一種object file)的symbol拿掉，所以在link time需要symbol時如果該object檔案被strip過，就會發生錯誤。範例如下：</p>

<pre><code class="text">$ make clean
rm -rf test  test.o  main_test.o

$ make
cc -g   -c -o test.o test.c
cc -g   -c -o main_test.o main_test.c
cc -g test.o main_test.o -o test

$ nm -a test.o 
0000000000000000 b .bss
0000000000000000 n .comment
0000000000000000 d .data
0000000000000000 N .debug_abbrev
0000000000000000 N .debug_aranges
0000000000000000 N .debug_info
0000000000000000 N .debug_line
0000000000000000 N .debug_str
0000000000000000 r .eh_frame
0000000000000000 D g_myStr
0000000000000008 d gp_myStr
0000000000000000 n .note.GNU-stack
                 U printf
0000000000000000 r .rodata
0000000000000000 t s_test
0000000000000026 T test
0000000000000000 a test.c
0000000000000000 t .text

$ ls -gG test.o
-rw-rw-r-- 1 3944 Nov 16 23:02 test.o

$ strip test.o 

$ ls -gG test.o
-rw-rw-r-- 1 952 Nov 16 23:03 test.o

$ nm test.o
nm: test.o: no symbols

$ make
cc -g test.o main_test.o -o test
/usr/bin/ld: error in test.o(.eh_frame); no .eh_frame_hdr table will be created.
main_test.o: In function `main':
/home/wen/tmp/sandbox/main_test.c:6: undefined reference to `test'
collect2: error: ld returned 1 exit status
make: *** [test] Error 1
</code></pre>

<p>這邊我<code>nm</code>下了<code>-a</code>參數，這會顯示出<strong>所有的symbol</strong>，預設的<code>nm</code>輸出如下提供比較。</p>

<pre><code class="text">$ nm test.o 
0000000000000000 D g_myStr
0000000000000008 d gp_myStr
                 U printf
0000000000000000 t s_test
0000000000000026 T test
</code></pre>

<p><a name="strip_test3"></a></p>

<h2>測試三：Strip debug 資訊</h2>

<p>其實只是單純要介紹<code>-d</code>參數而已</p>

<pre><code class="text">$ make clean
rm -rf test  test.o  main_test.o

$ ls -gG test.o
-rw-rw-r-- 1 3944 Nov 16 23:02 test.o

$ make
cc -g   -c -o test.o test.c
cc -g   -c -o main_test.o main_test.c
cc -g test.o main_test.o -o test

$ ls -gG test.o
-rw-rw-r-- 1 3944 Nov 16 23:02 test.o

$ strip -d test.o

$ nm -a test.o
0000000000000000 b .bss
0000000000000000 n .comment
0000000000000000 d .data
0000000000000000 r .eh_frame
0000000000000000 D g_myStr
0000000000000008 d gp_myStr
0000000000000000 n .note.GNU-stack
                 U printf
0000000000000000 r .rodata
0000000000000000 t s_test
0000000000000026 T test
0000000000000000 t .text

$ make
cc -g test.o main_test.o -o test

$ ./test
Hello Wen Liao

$ ls -gG test test.o
-rwxrwxr-x 1 9737 Nov 16 23:01 test
-rw-rw-r-- 1 1896 Nov 16 23:01 test.o
</code></pre>

<p><a name="strip_test4"></a></p>

<h2>測試四：Strip shared library</h2>

<p>這邊要幹的第一件事是修改Makefile如下。主要是把test.o包裝成shared library，這個Makefile很醜，我知道。</p>

<pre><code class="Makefile Makefile">TARGET=test
SRC=main_test.c
OBJ=$(patsubst  %.c, %.o, $(SRC))

LIB_SRC=test.c
LIB_OBJ=$(patsubst  %.c, %.o, $(LIB_SRC))
LIB_NAME=test
LIB=lib$(LIB_NAME).so
CFLAGS=-g

$(TARGET): $(OBJ) $(LIB)
    $(CC) $(CFLAGS) $&lt; -o $@ -L./ -l$(LIB_NAME)

$(LIB): $(LIB_OBJ)
    $(CC) -shared -Wl,-soname,$(LIB).0 $^ -o $@
    rm $(LIB).0 &amp;&amp; ln -sf $(LIB) $(LIB).0

$(LIB_OBJ): $(LIB_SRC)
    $(CC) $(CFLAGS) -c -fPIC $^

clean:
    rm -rf $(TARGET) $(OBJ) $(LIB_OBJ)
</code></pre>

<p>自幹shared library執行程式的時候不要忘記加上<code>LD_LIBRARY_PATH</code>環境變數：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ make clean
</span><span class='line'>rm -rf test  main_test.o  test.o&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ make
</span><span class='line'>cc -g   -c -o main_test.o main_test.c
</span><span class='line'>cc -g -c -fPIC test.c
</span><span class='line'>cc -shared -Wl,-soname,libtest.so.0 test.o -o libtest.so
</span><span class='line'>rm libtest.so.0 &amp;amp;&amp;amp; ln -sf libtest.so libtest.so.0
</span><span class='line'>cc -g main_test.o -o test -L./ -ltest&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ LD_LIBRARY_PATH=&lt;code&gt;pwd&lt;/code&gt; ./test
</span><span class='line'>Hello Wen Liao
</span></code></pre></td></tr></table></div></figure></p>

<p>現在來比較strip前後的shared library 差異吧。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ nm -a libtest.so
</span><span class='line'>0000000000000000 a
</span><span class='line'>0000000000201048 b .bss
</span><span class='line'>0000000000201048 B &lt;strong&gt;bss_start
</span><span class='line'>0000000000000000 n .comment
</span><span class='line'>0000000000201048 b completed.6973
</span><span class='line'>0000000000000000 a crtstuff.c
</span><span class='line'>0000000000000000 a crtstuff.c
</span><span class='line'>                 w &lt;/strong&gt;cxa_finalize@@GLIBC_2.2.5
</span><span class='line'>0000000000201030 d .data
</span><span class='line'>0000000000000000 N .debug_abbrev
</span><span class='line'>0000000000000000 N .debug_aranges
</span><span class='line'>0000000000000000 N .debug_info
</span><span class='line'>0000000000000000 N .debug_line
</span><span class='line'>0000000000000000 N .debug_str
</span><span class='line'>0000000000000650 t deregister_tm_clones
</span><span class='line'>00000000000006c0 t &lt;strong&gt;do_global_dtors_aux
</span><span class='line'>0000000000200df0 t &lt;/strong&gt;do_global_dtors_aux_fini_array_entry
</span><span class='line'>0000000000201030 d &lt;strong&gt;dso_handle
</span><span class='line'>0000000000200e00 d .dynamic
</span><span class='line'>0000000000200e00 d &lt;em&gt;DYNAMIC
</span><span class='line'>0000000000000398 r .dynstr
</span><span class='line'>0000000000000230 r .dynsym
</span><span class='line'>0000000000201048 D &lt;/em&gt;edata
</span><span class='line'>00000000000007c0 r .eh_frame
</span><span class='line'>000000000000079c r .eh_frame_hdr
</span><span class='line'>0000000000201050 B &lt;em&gt;end
</span><span class='line'>000000000000077c T &lt;/em&gt;fini
</span><span class='line'>000000000000077c t .fini
</span><span class='line'>0000000000200df0 t .fini_array
</span><span class='line'>0000000000000700 t frame_dummy
</span><span class='line'>0000000000200de8 t &lt;/strong&gt;frame_dummy_init_array_entry
</span><span class='line'>0000000000000840 r &lt;strong&gt;FRAME_END&lt;/strong&gt;
</span><span class='line'>0000000000201000 d &lt;em&gt;GLOBAL_OFFSET_TABLE&lt;/em&gt;
</span><span class='line'>                 w &lt;strong&gt;gmon_start&lt;/strong&gt;
</span><span class='line'>0000000000201038 D g_myStr
</span><span class='line'>00000000000001f0 r .gnu.hash
</span><span class='line'>000000000000045c r .gnu.version
</span><span class='line'>0000000000000480 r .gnu.version_r
</span><span class='line'>0000000000200fd0 d .got
</span><span class='line'>0000000000201000 d .got.plt
</span><span class='line'>0000000000201040 d gp_myStr
</span><span class='line'>00000000000005f0 T &lt;em&gt;init
</span><span class='line'>00000000000005f0 t .init
</span><span class='line'>0000000000200de8 t .init_array
</span><span class='line'>                 w &lt;/em&gt;ITM_deregisterTMCloneTable
</span><span class='line'>                 w &lt;em&gt;ITM_registerTMCloneTable
</span><span class='line'>0000000000200df8 d .jcr
</span><span class='line'>0000000000200df8 d &lt;strong&gt;JCR_END&lt;/strong&gt;
</span><span class='line'>0000000000200df8 d &lt;strong&gt;JCR_LIST&lt;/strong&gt;
</span><span class='line'>                 w &lt;/em&gt;Jv_RegisterClasses
</span><span class='line'>00000000000001c8 r .note.gnu.build-id
</span><span class='line'>0000000000000610 t .plt
</span><span class='line'>                 U printf@@GLIBC_2.2.5
</span><span class='line'>0000000000000680 t register_tm_clones
</span><span class='line'>00000000000004a0 r .rela.dyn
</span><span class='line'>00000000000005a8 r .rela.plt
</span><span class='line'>0000000000000785 r .rodata
</span><span class='line'>0000000000000735 t s_test
</span><span class='line'>0000000000000760 T test
</span><span class='line'>0000000000000000 a test.c
</span><span class='line'>0000000000000650 t .text
</span><span class='line'>0000000000201048 d &lt;strong&gt;TMC_END&lt;/strong&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ ls -gG libtest.so
</span><span class='line'>-rwxrwxr-x 1 9275 Nov 16 23:47 libtest.so&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ strip libtest.so&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ ls -gG libtest.so
</span><span class='line'>-rwxrwxr-x 1 6104 Nov 16 23:47 libtest.so&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ nm -a libtest.so
</span><span class='line'>nm: libtest.so: no symbols&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ LD_LIBRARY_PATH=&lt;code&gt;pwd&lt;/code&gt; ./test
</span><span class='line'>Hello Wen Liao
</span></code></pre></td></tr></table></div></figure></p>

<p>這邊變成有新的作業，dynamic link的時候沒有shared library沒有symbol怎麼拿到function address和全域變數？下次有看到再來解釋吧。</p>

<h2>補充</h2>

<p>如果編譯的程式碼有加入debug資訊，objdump在反組譯的時候可以加入<code>-S</code>參數比對原始碼對應的機械碼，對於想要研究系統細節的人應該有所幫助。簡單範例如下</p>

<pre><code class="text"> x$ make clean
rm -rf test  test.o  main_test.o
$ make
cc -g   -c -o test.o test.c
cc -g   -c -o main_test.o main_test.c
cc -g test.o main_test.o -o test

$ objdump -S -d test

test:     file format elf64-x86-64


Disassembly of section .init:

00000000004003e0 &lt;_init&gt;:
  4003e0:   48 83 ec 08             sub    $0x8,%rsp
...

0000000000400553 &lt;test&gt;:


void test(void)
{
  400553:   55                      push   %rbp
  400554:   48 89 e5                mov    %rsp,%rbp
    printf("Hello ");
  400557:   bf 24 06 40 00          mov    $0x400624,%edi
  40055c:   b8 00 00 00 00          mov    $0x0,%eax
  400561:   e8 aa fe ff ff          callq  400410 &lt;printf@plt&gt;
    s_test();
  400566:   e8 c2 ff ff ff          callq  40052d &lt;s_test&gt;
}
  40056b:   5d                      pop    %rbp
  40056c:   c3                      retq   

...
</code></pre>

<h2>參考資料</h2>

<ul>
<li>Binary Hacks：駭客秘傳技巧一百招</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[雜記: What a C Programmer Should Know About Memory]]></title>
    <link href="http://wen00072.github.io/blog/2015/08/08/notes-what-a-c-programmer-should-know-about-memory/"/>
    <updated>2015-08-08T15:30:00+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/08/08/notes-what-a-c-programmer-should-know-about-memory</id>
    <content type="html"><![CDATA[<p>出處: <a href="http://marek.vavrusa.com/c/memory/2015/02/20/memory/">What a C programmer should know about memory</a></p>

<p>這是筆記，不是導讀。單純放我覺得特別的東西和感想。不會自我要求可讀性和文章架構，請自行斟酌。</p>

<h2>Understanding virtual memory - the plot thickens</h2>

<ul>
<li><p>The virtual memory allocator (VMA) may give you a memory it doesn&rsquo;t have, all in a vain hope that you&rsquo;re not going to use it. Just like banks today. 幹原來銀行是虛擬記憶體</p></li>
<li><p>malloc給valid pointer不要太高興，等你要開始用的時候搞不好OS給個OOM說人肉鹹鹹。簡單來說就是一張支票，能不能拿來開等到兌現才知道（煙）</p></li>
</ul>


<h2>Understanding stack allocation</h2>

<p>原來C99的variable length array的運作是因為stack frame的特性，反正你要多少stack在橋的時候順便加一加。malloa一樣的原則。又學到了</p>

<h2>When to bother with a custom allocator</h2>

<ul>
<li>今日英文(?): GP allocator, General purpose allocator，你每天用的malloc是也。什麼，沒用malloc過啊，還真是幸福（煙）。</li>
</ul>


<h3>Slab allocator</h3>

<ul>
<li>有的時候程式會allocte並使用多個不連續的記憶體區塊，如樹狀的資料結構。這時候對於系統來說有幾個問題，一是fragment、二是因為不連續，無法使用cache增快效能。</li>
</ul>


<p>作者posix_memalign()可解決這類的問題。目前看範例，看不懂，感覺上和malloc很大的記憶體空間，自己管理差不多。先跳過，有大大路過可以留言解惑一下。</p>

<h2>Demand paging explained</h2>

<ul>
<li><p>Linux系統提供一系列的記憶體管理API</p>

<ul>
<li>分配，釋放</li>
<li>記憶體管理API

<ul>
<li>mlock，禁止被swapped out</li>
</ul>
</li>
<li>madvise，提供管道告訴系統page管理方式如

<ul>
<li>MADV_RANDOM，期待記憶體page讀取行為是隨機的。</li>
</ul>
</li>
</ul>
</li>
<li><p>laze loading：allocate記憶體先給位址。等到process要存取的時候OS就會發現存取到沒摸過的記憶體，於是就產生page fault，這時候才去處理page分配的問題。</p></li>
<li><p>每次page fault 就像kernel發動白金之星，然後就有一個白痴驚訝地發現自己樓梯怎麼走都走不完，但是他完全無法感受/了解發生了什麼事。</p></li>
</ul>


<h2>Fun with flags memory mapping</h2>

<ul>
<li>long page_size = sysconf(_SC_PAGESIZE);

<ul>
<li>取得系統的page size。</li>
</ul>
</li>
</ul>


<h2>Fixed memory mappings</h2>

<p>投降輸一半，不懂Fixed memory mappings是啥、以及什麼時候需要這樣的東西。</p>

<h2>File-backed memory maps</h2>

<p>透過mmap，可以將檔案內容mmap到記憶體中，如此一來可以加快存取速度。配合參數，多個process可以共用同一塊記憶體。不過衍生出來有幾個問題</p>

<ol>
<li>如何寫回檔案

<ul>
<li>man msync</li>
<li>其他方式：fsync/pwrite</li>
</ul>
</li>
<li>如何調整檔案/記憶體長度

<ul>
<li>man ftruncate</li>
</ul>
</li>
</ol>


<h3>Copy-on-write</h3>

<p>有些情況是一個process要吃別的process已經map到記憶體的內容，而不要把自己改過的資料放回原本的記憶體。也就是說最終會有兩塊記憶體(兩份資料)。當然每次都複製有點多餘，因此系統使用了Copy-on-write機制。要怎麼做呢？就是在mmap使用MAP_PRIVATE參數即可。</p>

<h3>mmap不是萬能丹，極端情況下連續page fault可能會比原本的開檔獨資料還慢。</h3>

<hr />

<h1>延伸參考資料，我都沒看</h1>

<ul>
<li><a href="http://www.akkadia.org/drepper/cpumemory.pdf">What every programmer should know about memory</a></li>
<li><a href="http://landley.net/writing/memory-faq.txt">Memeory FAQ</a></li>
<li><a href="https://www.kernel.org/doc/gorman/pdf/thesis.pdf">An Investigation Into the Theoretical Foundations and Implementation of the Linux Virtual Memory Manager</a></li>
<li><a href="https://www.kernel.org/doc/gorman/pdf/understand.pdf">Understanding the Linux Virtual Memory Manager</a>

<ul>
<li>爆炸長，講Linux的VM管理</li>
</ul>
</li>
<li><a href="http://www.ualberta.ca/CNS/RESEARCH/LinuxClusters/mem.html">Understanding Memory</a></li>
<li><a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/">Anatomy of a Program in Memory</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 語言的潛規則型態轉換]]></title>
    <link href="http://wen00072.github.io/blog/2015/05/08/conversion-in-c/"/>
    <updated>2015-05-08T23:37:45+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/05/08/conversion-in-c</id>
    <content type="html"><![CDATA[<p>同樣是看過<a href="http://knking.com/books/c2/index.html">C Programming: A Modern Approach</a>的筆記整理。一樣，寫的時候手上沒書，請自行斟酌，盡信書不如無書，更何況是組裝工亂寫的東西呢。</p>

<p>一般來說，變數型態可以強制轉換，這學過C 語言應該都知道。不過看了書上才發現不只強制轉換，compiler也會幫你的程式碼加料、做型態轉換。更恐怖的是，沒注意到的話，會發生慘劇。</p>

<p>本文開始之前，先定義專有名詞：</p>

<ul>
<li>promotion

<ul>
<li>當然不是升官還是促銷。而是把變數的型態升級，如short int -> int。為什麼要這樣幹呢？因為expression裏面變數不只一個，做運算的時候需要把某些變數升級，以免計算結果超過預期。諷刺的是，因為這樣的方式，也可能讓你的程式行為和你預期的不同。</li>
</ul>
</li>
</ul>


<p>書中提到潛規則型態轉換發生的時機如下</p>

<ul>
<li>expression中變數型態不同</li>
<li>assign的left value和right value型態不同</li>
<li>函數中的參數變數型態和函數內部使用該變數時的型態不同</li>
<li>函數的回傳值和宣告的不同</li>
</ul>


<p>後面兩種大概就是下面這樣的情況吧</p>

<pre><code class="c ">long test(int i)
{
    i = 0.5f;

    return i;
}
</code></pre>

<p>書中用下面的方式分類C 語言的潛規則型態轉換規則，分別整理如下，偷懶不講C99了。</p>

<h2>assignment</h2>

<p>這個最簡單，等號左邊用啥型態右邊就得轉成這樣的型態。這也是為何</p>

<pre><code class="c">    int i = 11.039;
    printf("%d", i);
</code></pre>

<p>結果會是11的原因。</p>

<h2>expression</h2>

<p>一樣這是compiler的術語。此這邊就是一堆的歡樂的型態排列組合，C99還有<code>_Complex</code>和<code>_Bool</code>參戰。</p>

<p>一樣先分類</p>

<ul>
<li>expression中的變數只有小數點那種型態，依下面順序promote: <code>float</code> -> <code>double</code> -> <code>long double</code></li>
<li>expression中的變數只有整數，就變成

<ul>
<li>promote時要判斷使用<code>unsigned</code> 還是<code>signed</code>整數依照下面的順序promote:

<ul>
<li>&hellip; <code>int</code> -> <code>unsigned int</code> -> <code>long int</code> -> <code>unsigned long int</code> &hellip;</li>
</ul>
</li>
<li>這種情況沒注意的話，可能就會出現下面的悲劇</li>
</ul>
</li>
</ul>


<pre><code class="c implicit.c">#include &lt;stdio.h&gt;
void implicit_conv()
{
    int i = -1;
    unsigned int j = 100;

    if (i &lt; j) {
        printf("expected\n"); 
    }
    else {
        printf("GG\n");     
    }
}

int main(int argc, char **argv)
{
    implicit_conv();

    return 0;
}
</code></pre>

<p>執行結果如下
&#8220;`text
$ make implicit
cc     implicit.c   -o implicit</p>

<p>$ ./implicit
GG
<code>``
為何會GG呢，因為</code>i &lt; j<code>是一個**expression**，照上面的規矩，expression同時有</code>int<code>和</code>unsigned int<code>的話，</code>int<code>會被promote的</code>unsigned int<code>，</code>-1`的二進位不知道的人，可能要先搞懂再來學C吧？</p>

<p>如果你擔心程式有類似的問題，可以把<code>gcc</code>最囉唆的檢查打開，就會噴出錯誤如下</p>

<pre><code class="text">$ make implicit CFLAGS="-Wall -Wextra -Werror"
cc -Wall -Wextra -Werror   -c -o implicit.o implicit.c
implicit.c: In function ‘implicit_conv’:
implicit.c:7:11: error: comparison between signed and unsigned integer expressions [-Werror=sign-compare]
     if (i &lt; j) {
           ^
implicit.c: In function ‘main’:
implicit.c:15:14: error: unused parameter ‘argc’ [-Werror=unused-parameter]
 int main(int argc, char **argv)
              ^
implicit.c:15:27: error: unused parameter ‘argv’ [-Werror=unused-parameter]
 int main(int argc, char **argv)
                           ^
cc1: all warnings being treated as errors
make: *** [implicit.o] Error 1
</code></pre>

<p>你可能會問，那有小數點的型態和整數型態亂戰會怎樣呢？自己估狗或看書吧。</p>

<h2>題外話</h2>

<h3>題外話一</h3>

<p>由於這些潛規則，在轉換型態的時候，可以看到這樣的statement。</p>

<pre><code class="c">double whatsoever;
whatsoever = (double) 10 / 3;
</code></pre>

<p>為什麼<code>3</code>不用型態轉換呢？你必須要比對C語言的<a href="http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence">Operator precedence</a>，也就是運算元處理順序。可以知道C 語法會處理順序如下</p>

<ul>
<li><code>10</code> cast成<code>double</code>型態</li>
<li>因為潛規則，<code>3</code>也會被promote成<code>doule</code></li>
<li>計算<code>10 / 3</code></li>
<li>將結果assign給 <code>=</code> 左邊的變數</li>
</ul>


<h3>題外話二</h3>

<p>在C語言中有小數點的常數預設型態可是<code>double</code>唷。所以你如果有<code>float</code>最好使用下面的方式轉換型態。至於為什麼會規定是<code>double</code>呢？書中有講八卦，就不破梗了。</p>

<pre><code class="c">float whatsoever = 3.14f;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C 語言的format String]]></title>
    <link href="http://wen00072.github.io/blog/2015/05/06/format-string-in-c/"/>
    <updated>2015-05-06T22:34:43+08:00</updated>
    <id>http://wen00072.github.io/blog/2015/05/06/format-string-in-c</id>
    <content type="html"><![CDATA[<p>format string也是看過<a href="http://knking.com/books/c2/index.html">C Programming: A Modern Approach</a>才注意的。寫文的當下沒帶這本書，問男人好了。</p>

<pre><code>$ man 3 printf
</code></pre>

<p>簡單來說，format string是由</p>

<ul>
<li>普通文字，不包含單獨的<code>%</code>字元</li>
<li>conversion specifications，就是你看到的<code>%s</code>之類的的東西</li>
<li>每個conversion specifier有對應的參數</li>
</ul>


<p>整理conversion specifier如下</p>

<ul>
<li>結構

<ul>
<li>以<code>%</code>開頭</li>
<li>以conversion specifier 結尾</li>
<li>中間有些<del>特異功能</del>optional的描述如

<ul>
<li><a href="#fs_fl">Flags</a></li>
<li><a href="#fs_wd">最少欄位寬度規範</a></li>
<li><a href="#fs_prec">精確度描述</a></li>
<li><a href="#fs_sz">變數size輔助描述</a></li>
</ul>
</li>
<li><code>Conversion specifier</code>結尾，就是我們看過的<code>d</code>, <code>f</code> 等</li>
</ul>
</li>
</ul>


<p>示意如下</p>

<ul>
<li><code>%</code>[<font color="red">Flag</font>][<font color="green">最少欄位寬度規範</font>][<font color="red">精確度描述</font>][<font color="green">變數size描述</font>]<code>Conversion specifier</code></li>
</ul>


<p>接下來依上面的部份說明如下</p>

<p><a name="fs_fl"></a></p>

<h2>Flags</h2>

<ul>
<li><code>#</code>

<ul>
<li>自動對指定的數字進位數（八進位、十進位、十六進位等）加上合適的prefix如<code>0x</code>, <code>0</code>等。</li>
</ul>
</li>
<li><code>0</code>

<ul>
<li>填入<code>0</code>作為pad。pad是啥呢？中文意思是填充物，自己體會吧。</li>
</ul>
</li>
<li><code>-</code>

<ul>
<li>預設format string是靠右對齊，用了這個會變成靠左對齊。和樓上<code>0</code>一起會不會數字多好幾倍如<code>432</code>變<code>4320000</code>？不會，兩個同時出現<code>0</code>會被省略。</li>
</ul>
</li>
<li><code>+</code>

<ul>
<li>指定數字最前面要加正負號</li>
</ul>
</li>
<li><code>' '</code>

<ul>
<li>如果有設定數字要先顯示正負號，會在前面多加一個空白</li>
</ul>
</li>
</ul>


<p>以上是C 語言規範的，不同編譯器有加碼，懶得寫，自己問男人吧。</p>

<p><a name="fs_wd"></a></p>

<h2>最少欄位寬度規範</h2>

<p>一定要正整數，當印出的數字長度少於這邊指定的參數，會自動填空白或是0。印出超過這邊指定的寬度的話呢？超過就超過，不然要怎麼辦？</p>

<p>另外預設是往右邊對齊，想要往左對齊，請參考<code>-</code> flag。</p>

<p><a name="fs_prec"></a></p>

<h2>精確度描述</h2>

<p>以<code>.十進位數字表示</code>，不同的變數型態有不同的精確度定義。</p>

<p>舉例來說</p>

<ul>
<li>整數，<strong>最少</strong>要出現的數字長度，少於這樣的數字，會直接在左邊或是基底符號（0, 0x)後面填零補完。</li>
<li>實數，也就是有小數點的，就是小數點後面<strong>最多</strong>可以出現的數字長度，超過了就截掉。</li>
</ul>


<p><a name="fs_sz"></a></p>

<h2>變數size輔助描述</h2>

<p>一般來說，我們會知道<code>d</code>是整數，但是在C語言還是有<code>long int</code>，<code>long long int</code>這樣型態的整數，為了能夠更精確的顯示，format string提供了這樣的描述，讓你加在<code>Conversion specifier</code>，如</p>

<ul>
<li><code>l</code>: long</li>
<li><code>h</code>: short</li>
</ul>


<p>詳細列表和排列組合請問男人。</p>

<h2>其他</h2>

<p>flag除了C規格定的以外，不同廠商有加料，一樣去問男人，不過要用這個的話要考慮porting的問題。</p>

<p>除此之外，男人有列出所有的<code>Conversion specifier</code>，除了熟悉的<code>d</code>, <code>f</code>, <code>s</code>, <code>c</code>, <code>x</code>以外，我列幾個我感興趣的如下</p>

<ul>
<li><code>a</code>, <code>A</code>: C99專用，實數的十六進位表示法</li>
<li><code>p</code>: void * 的位址</li>
</ul>


<h2>怪招</h2>

<p>format string還有<code>*</code>和<code>%m$</code>這種鬼東西，目前搞不清楚為什麼要這樣幹。
不過幾然花了時間搞懂，就整理一下</p>

<ul>
<li><code>*</code>指目前對應的參數的<strong>下一個</strong>參數</li>
<li><code>%m$*n$</code>把第n個的參數和第m個顯示<strong>交換</strong></li>
</ul>


<p>不知道是什麼鬼對不對？我也是，所以寫了程式測試一下</p>

<pre><code class="c test_format_string.c">#include &lt;stdio.h&gt;

int main(int argc, char **argv)
{
    int i = 2;
    int j = 3;
    int k = 4;

    printf("@@%*d\n", i, j);

    /* print third argument then first argument */
    printf("!!%3$*1$d, %1$*2$d\n", i, j, k);

    return 0;
}
</code></pre>

<p>看看輸出吧，一樣懶得寫Makefile</p>

<pre><code class="text">$ make test_format_string
cc     test_format_string.c   -o test_format_string

$ ./test_format_string 
@@ 3
!! 4,   2
</code></pre>

<h2>結論</h2>

<p>這篇文章文章我介紹了</p>

<ul>
<li>format string和他的語法簡單說明</li>
<li>make 的implicit rule</li>
<li>取得Linux 下執行程式結束回傳值</li>
</ul>


<h2>參考資料</h2>

<ul>
<li><code>man 3 printf</code></li>
<li><a href="http://alvinalexander.com/programming/printf-format-cheat-sheet">A printf format reference page (cheat sheet)</a></li>
<li><a href="http://www.cprogramming.com/tutorial/printf-format-strings.html">Printf Format Strings</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
